/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Hive Metastore API definition.
 *
 * This API is different from traditional metastore API. It separates all
 * metadata-only operations and does not include any filesystem operations.
 * The assumption is that some other service or the client deals with file system
 * operations.
 *
 * The API also introduces the notion of an object ID - globally unique string
 * associated with the object. While object name can change (e.g. with
 * rename operation), identity of the object never changes.
 *
 * Cookie is supposed to be used to associate multiple requests to a single session.
 * The value of the cookie is likely to be printed in logs so it shouldn't contain
 * any sensitive information.
 * Metastore service does not interpret the cookie but may print it in its logs.
 * We could call it SessionId but callers may decide to use it for whatever other
 * purposes, so using generic term here.
 *
 * Every object belongs to a namespace. The idea is that operations across
 * namespaces are completely independent. They can be forwarded to different storage
 * engines.
 * Namespase is created automatically when an object is placed in a namespace.
 * NOTE - should we explicitely manage namespaces instead?
 *
 * Objects belong to a specific namespace and have unique name and unique ID
 * in the namespace.
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.akolb.metastore";
option java_outer_classname = "MetaStore";

package metastore;

import "google/api/annotations.proto";

// Metastore service
service Metastore {
    // Create a new database
    rpc CreateDabatase (CreateDatabaseRequest) returns (GetDatabaseResponse);
    // Get database information
    rpc GetDatabase (GetDatabaseRequest) returns  (GetDatabaseResponse) {
        option (google.api.http) = {
           get: "/v2/databases/{id.namespace}/{id.name}"
        };
    }
    // Get collection of databases
    rpc ListDatabases (ListDatabasesRequest) returns  (stream Database) {
        option (google.api.http) = {
	       get: "/dblist/{namespace}"
	};
    }
    // Destroy a database
    rpc DropDatabase (DropDatabaseRequest) returns (RequestStatus);
}

// General status for results
message RequestStatus {
    enum Status {
        OK = 0;       // successful request
        ERROR = 1;    // General error
        NOTFOUND = 2; // Requested object not found
        CONFLICT = 3; // Object already exists
    }
    Status status = 1;
    string error = 2;  // detailed error message
    string cookie = 3; // copied from request
}

// Objects belong to a specific namespace and have unique name and unique ID
// in the namespace.
message Id {
    string namespace = 1;
    string name = 2;
    string id = 3;
}

// Database is a container for tables.
// Database object has two sets of parameters:
//  - User parameters are intended for user and are just transparently passed around
//  - System parameters are intended to be used by Hive for its internal purposes
//
// Original Metastore Database object also had location and owner information.
// These can be represented using system parameters if needed since the current
// metastore service does not interpret either Location or Owner info.
message Database {
    Id                  id = 1;
    map<string, string> parameters = 2; // Database user parameters
    map<string, string> system_parameters = 3;
}

// Create a new database.
message CreateDatabaseRequest {
    Database database = 1;
    string   cookie = 2;
}

// Request to get database by its ID.
message GetDatabaseRequest {
    Id     id = 1;
    string cookie = 2;
}

message GetDatabaseResponse {
    Database      database = 1;
    RequestStatus status = 2;
}

// Request to get list of databases
// If exclude_params is set, result may omit parameters
message ListDatabasesRequest {
    string namespace = 1;
    string cookie = 2;
    string name_pattern = 3;
    bool   exclude_params = 4;
}

// Request to drop a database.
// Dropping a database also drops all objects contained in the database
message DropDatabaseRequest {
    Id     id = 1;
    string cookie = 2;
}


