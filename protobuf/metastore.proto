/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Hive Metastore API definition.
 *
 * This API is different from traditional metastore API. It separates all
 * metadata-only operations and does not include any filesystem operations.
 * The assumption is that some other service or the client deals with file system
 * operations.
 *
 * The API also introduces the notion of an object ID - globally unique string
 * associated with the object. While object name can change (e.g. with
 * rename operation), identity of the object never changes. The lookup can be done
 * either by name or by ID. The intention is to have cacheable objects which do not
 * change on renames.
 *
 * Cookie is supposed to be used to associate multiple requests to a single session.
 * The value of the cookie is likely to be printed in logs so it shouldn't contain
 * any sensitive information.
 * Metastore service does not interpret the cookie but may print it in its logs.
 * We could call it SessionId but callers may decide to use it for whatever other
 * purposes, so using generic term here.
 *
 * Every object belongs to a catalog. The idea is that operations across
 * catalogs are completely independent. They can be forwarded to different storage
 * engines.
 *
 */

syntax = "proto3";

option java_multiple_files = true;
option java_package = "com.akolb.metastore";
option java_outer_classname = "MetaStore";

package metastore;

import "google/api/annotations.proto";

// Metastore service
service Metastore {
    // Create a new database
    rpc CreateDabatase (CreateDatabaseRequest) returns (GetDatabaseResponse);
    // Get database information
    rpc GetDatabase (GetDatabaseRequest) returns  (GetDatabaseResponse) {
        option (google.api.http) = {
           get: "/v2/database/{id.catalog}"
        };
    }
    // Get collection of databases
    rpc ListDatabases (ListDatabasesRequest) returns  (stream Database) {
        option (google.api.http) = {
	       get: "/v2/dblist/{catalog}"
	};
    }
    // Destroy a database
    rpc DropDatabase (DropDatabaseRequest) returns (RequestStatus);

    // Create a new table
    rpc CreateTable (CreateTableRequest) returns (GetTableResponse);

    /*
    // Get table information
    rpc GetTable (GetTableRequest) returns (GetTableResponse);

    // Get collection of tables
    rpc ListTables (ListTablesRequest) returns  (stream Table);

    // Destroy a table
    rpc DropTable (DropTableRequest) returns (RequestStatus);
    */
}

// General status for results
message RequestStatus {
    enum Status {
        OK = 0;       // successful request
        ERROR = 1;    // General error
        NOTFOUND = 2; // Requested object not found
        CONFLICT = 3; // Object already exists
        INTERNAL = 4; // Internal server error
    }
    Status status = 1;
    string error = 2;  // detailed error message
    string cookie = 3; // copied from request
}

// Objects belong to a specific catalog and have unique name and unique ID
// in the catalog. Both name and ID are just sequence of bytes - there are no
// assumptions about encoding or length.
message Id {
    string catalog = 1;
    string name = 2;
    string id = 3;
}

// Database is a container for tables.
// Database object has two sets of parameters:
//  - User parameters are intended for user and are just transparently passed around
//  - System parameters are intended to be used by Hive for its internal purposes
//
// seq_id is a numeric ID which is unique within a catalog. It can be used to track
// new databases in the catalog
//
// Original Metastore Database object also had owner information.
// These can be represented using system parameters if needed since the current
// metastore service does not interpret Owner info.
message Database {
  Id                  id = 1;
  uint64              seq_id = 2;      // Unique sequence ID within calalog
  string              location = 3;   // Default location of database objects
  map<string, string> parameters = 4; // Database user parameters
  map<string, string> system_parameters = 5; // System parameters
}

// Create a new database.
message CreateDatabaseRequest {
    Database database = 1;
    string   cookie = 2;
}

// Request to get database by its ID.
message GetDatabaseRequest {
    Id     id = 1;
    string cookie = 2;
}

message GetDatabaseResponse {
    Database      database = 1;
    RequestStatus status = 2;
}

// Request to get list of databases
// If exclude_params is set, result may omit parameters
message ListDatabasesRequest {
    string catalog = 1;
    string cookie = 2;
    string name_pattern = 3;
    bool   exclude_params = 4;
}

// Request to drop a database.
// Dropping a database also drops all objects contained in the database
message DropDatabaseRequest {
    Id     id = 1;
    string cookie = 2;
}

// FieldSchema defines name and type for each column.
message FieldSchema {
    string name = 1; // name of the field
    string type = 2; // type of the field.
    string comment = 3; // User description
}

// Known SerDes are represented using enum. Unknown ones are represented using strings.
enum SerdeType {
    SERDE_CUSTOM = 0;
    SERDE_LAZY_SIMPLE = 1;
    SERDE_AVRO = 2;
    SERDE_JSON = 3;
    SERDE_ORC = 4;
    SERDE_REGEX = 5;
    SERDE_THRIFT = 6;
    SERDE_PARQUET = 7;
    SERDE_CSV = 8;
}

// Known Input Formats. CUSTOM means that it should be specified as a string.
enum InputFormat {
    IF_CUSTOM = 0;
    IF_SEQUENCE = 1;
    IF_TEXT = 2;
    IF_HIVE = 3;
}

// Known Output Formats. CUSTOM means that it should be specified as a string.
enum OutputFormat {
    OF_CUSTOM = 0;
    OF_SEQUENCE = 2;
    OF_IGNORE_KEY = 3;
    OF_HIVE = 4;
}

enum TableType {
    TTYPE_MANAGED = 0;
    TTYPE_EXTERNAL = 1;
    TTYPE_INDEX = 2;
}

// Serialization/Deserialization information
message SerDeInfo {
    SerdeType type = 1;                 // Serde type. If CUSTOM, use the name
    string name = 2;                    // name of the serde, table name by default
    string serializationLib = 3;        // usually the class that implements the extractor & loader
                                        // NOTE: Should we enum this as well?
    map<string, string> parameters = 4; // initialization parameters
}

// sort order of a column (column name along with asc/desc)
message Order {
    string col = 1;         // sort column name
    bool ascending = 2;     // asc(1) or desc(0)
}

// StorageDescriptor holds all the information about physical storage of the data belonging to a table
message StorageDescriptor {
    repeated FieldSchema cols = 1;           // required (refer to types defined above)
    string location = 2;                     // Object location
    InputFormat inputFormat = 3;             // Specification of input format. If custom, use inputFormatName.
    string inputFormatName = 4;              // Name of input format if custom
    OutputFormat outputFormat = 5;           // Specification of input format. If custom, use outputFormatName.
    string outputFormatName = 6;             // Name of output format if custom
    int32 numBuckets = 7;                    // this must be specified if there are any dimension columns
    SerDeInfo serdeInfo = 8;                 // serialization and deserialization information
    repeated string bucketCols = 9;          // reducer grouping columns and clustering columns and bucketing columns`
    repeated Order sortCols = 10;            // sort order of the data in each bucket
    map<string, string> parameters = 11;     // any user supplied key value hash
    map<string, string> system_parameters = 12;    // Internal parameters not settable by user
}

// Table information
message Table {
    Id id = 1;
    Id db_id = 2;                              // Database it belongs to
    uint64 seq_id = 3;                         // Sequential ID within database
    StorageDescriptor sd = 4;                  // storage descriptor of the table
    repeated FieldSchema partitionKeys = 5;    // partition keys of the table. only primitive types are supported
    TableType tableType =6;                    // table type enum, e.g. EXTERNAL_TABLE
    map<string, string> parameters = 7;        // User-settable parameters
    map<string, string> system_parameters = 8; // Internal parameters
}

// Create a new table.
message CreateTableRequest {
    Table table = 1;
    string   cookie = 2;
}

// Request to get table by its ID.
message GetTableRequest {
    Id     id = 1;
    Id     db_id = 2; // Database ID
    string cookie = 3;
}

message GetTableResponse {
    Table     table = 1;
    RequestStatus status = 2;
}

// Request to get list of databases
// If exclude_params is set, result may omit parameters
message ListTablesRequest {
    Id db_id = 1;
    string cookie = 2;
}

// Request to drop a database.
// Dropping a database also drops all objects contained in the database
message DropTableRequest {
    Id     id = 1;
    Id     db_id = 2;
    string cookie = 3;
}
