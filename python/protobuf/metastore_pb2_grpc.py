# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import metastore_pb2 as metastore__pb2


class MetastoreStub(object):
  """Metastore service

  This API is different from traditional metastore API. It separates all
  metadata-only operations and does not include any filesystem operations.
  The assumption is that some other service or the client deals with file system
  operations.

  This API also uses cookies to associates requests with a session.
  The value of the cookie is likely to be printed in logs so it shouldn't contain
  any sensitive information.
  Metastore service does not interpret the cookie but may print it in its logs.
  We could call it SessionId but callers may decide to use it for whatever other
  purposes, so using generic term here.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.CreateDabatase = channel.unary_unary(
        '/metastore.Metastore/CreateDabatase',
        request_serializer=metastore__pb2.CreateDatabaseRequest.SerializeToString,
        response_deserializer=metastore__pb2.GetDatabaseResponse.FromString,
        )
    self.GetDatabase = channel.unary_unary(
        '/metastore.Metastore/GetDatabase',
        request_serializer=metastore__pb2.GetDatabaseRequest.SerializeToString,
        response_deserializer=metastore__pb2.GetDatabaseResponse.FromString,
        )
    self.ListDatabases = channel.unary_stream(
        '/metastore.Metastore/ListDatabases',
        request_serializer=metastore__pb2.ListDatabasesRequest.SerializeToString,
        response_deserializer=metastore__pb2.Database.FromString,
        )
    self.DropDatabase = channel.unary_unary(
        '/metastore.Metastore/DropDatabase',
        request_serializer=metastore__pb2.DropDatabaseRequest.SerializeToString,
        response_deserializer=metastore__pb2.RequestStatus.FromString,
        )
    self.CreateTable = channel.unary_unary(
        '/metastore.Metastore/CreateTable',
        request_serializer=metastore__pb2.CreateTableRequest.SerializeToString,
        response_deserializer=metastore__pb2.GetTableResponse.FromString,
        )
    self.GetTable = channel.unary_unary(
        '/metastore.Metastore/GetTable',
        request_serializer=metastore__pb2.GetTableRequest.SerializeToString,
        response_deserializer=metastore__pb2.GetTableResponse.FromString,
        )
    self.ListTables = channel.unary_stream(
        '/metastore.Metastore/ListTables',
        request_serializer=metastore__pb2.ListTablesRequest.SerializeToString,
        response_deserializer=metastore__pb2.Table.FromString,
        )
    self.DropTable = channel.unary_unary(
        '/metastore.Metastore/DropTable',
        request_serializer=metastore__pb2.DropTableRequest.SerializeToString,
        response_deserializer=metastore__pb2.RequestStatus.FromString,
        )


class MetastoreServicer(object):
  """Metastore service

  This API is different from traditional metastore API. It separates all
  metadata-only operations and does not include any filesystem operations.
  The assumption is that some other service or the client deals with file system
  operations.

  This API also uses cookies to associates requests with a session.
  The value of the cookie is likely to be printed in logs so it shouldn't contain
  any sensitive information.
  Metastore service does not interpret the cookie but may print it in its logs.
  We could call it SessionId but callers may decide to use it for whatever other
  purposes, so using generic term here.
  """

  def CreateDabatase(self, request, context):
    """Create a new database.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetDatabase(self, request, context):
    """Get database information
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListDatabases(self, request, context):
    """Return all databases in a catalog
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DropDatabase(self, request, context):
    """Destroy the database
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def CreateTable(self, request, context):
    """Create a new table
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetTable(self, request, context):
    """Get table information
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def ListTables(self, request, context):
    """Get all tables from a database
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DropTable(self, request, context):
    """Destroy a table
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MetastoreServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'CreateDabatase': grpc.unary_unary_rpc_method_handler(
          servicer.CreateDabatase,
          request_deserializer=metastore__pb2.CreateDatabaseRequest.FromString,
          response_serializer=metastore__pb2.GetDatabaseResponse.SerializeToString,
      ),
      'GetDatabase': grpc.unary_unary_rpc_method_handler(
          servicer.GetDatabase,
          request_deserializer=metastore__pb2.GetDatabaseRequest.FromString,
          response_serializer=metastore__pb2.GetDatabaseResponse.SerializeToString,
      ),
      'ListDatabases': grpc.unary_stream_rpc_method_handler(
          servicer.ListDatabases,
          request_deserializer=metastore__pb2.ListDatabasesRequest.FromString,
          response_serializer=metastore__pb2.Database.SerializeToString,
      ),
      'DropDatabase': grpc.unary_unary_rpc_method_handler(
          servicer.DropDatabase,
          request_deserializer=metastore__pb2.DropDatabaseRequest.FromString,
          response_serializer=metastore__pb2.RequestStatus.SerializeToString,
      ),
      'CreateTable': grpc.unary_unary_rpc_method_handler(
          servicer.CreateTable,
          request_deserializer=metastore__pb2.CreateTableRequest.FromString,
          response_serializer=metastore__pb2.GetTableResponse.SerializeToString,
      ),
      'GetTable': grpc.unary_unary_rpc_method_handler(
          servicer.GetTable,
          request_deserializer=metastore__pb2.GetTableRequest.FromString,
          response_serializer=metastore__pb2.GetTableResponse.SerializeToString,
      ),
      'ListTables': grpc.unary_stream_rpc_method_handler(
          servicer.ListTables,
          request_deserializer=metastore__pb2.ListTablesRequest.FromString,
          response_serializer=metastore__pb2.Table.SerializeToString,
      ),
      'DropTable': grpc.unary_unary_rpc_method_handler(
          servicer.DropTable,
          request_deserializer=metastore__pb2.DropTableRequest.FromString,
          response_serializer=metastore__pb2.RequestStatus.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'metastore.Metastore', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
