// Code generated by protoc-gen-go. DO NOT EDIT.
// source: metastore.proto

/*
Package metastore is a generated protocol buffer package.

It is generated from these files:
	metastore.proto

It has these top-level messages:
	RequestStatus
	Id
	Database
	CreateDatabaseRequest
	GetDatabaseRequest
	GetDatabaseResponse
	ListDatabasesRequest
	DropDatabaseRequest
*/
package metastore

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RequestStatus_Status int32

const (
	RequestStatus_OK       RequestStatus_Status = 0
	RequestStatus_ERROR    RequestStatus_Status = 1
	RequestStatus_NOTFOUND RequestStatus_Status = 2
	RequestStatus_CONFLICT RequestStatus_Status = 3
)

var RequestStatus_Status_name = map[int32]string{
	0: "OK",
	1: "ERROR",
	2: "NOTFOUND",
	3: "CONFLICT",
}
var RequestStatus_Status_value = map[string]int32{
	"OK":       0,
	"ERROR":    1,
	"NOTFOUND": 2,
	"CONFLICT": 3,
}

func (x RequestStatus_Status) String() string {
	return proto.EnumName(RequestStatus_Status_name, int32(x))
}
func (RequestStatus_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// General status for results
type RequestStatus struct {
	Status RequestStatus_Status `protobuf:"varint,1,opt,name=status,enum=metastore.RequestStatus_Status" json:"status,omitempty"`
	Error  string               `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
	Cookie string               `protobuf:"bytes,3,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *RequestStatus) Reset()                    { *m = RequestStatus{} }
func (m *RequestStatus) String() string            { return proto.CompactTextString(m) }
func (*RequestStatus) ProtoMessage()               {}
func (*RequestStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestStatus) GetStatus() RequestStatus_Status {
	if m != nil {
		return m.Status
	}
	return RequestStatus_OK
}

func (m *RequestStatus) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *RequestStatus) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

// Objects belong to a specific catalog and have unique name and unique ID
// in the catalog.
type Id struct {
	Catalog string `protobuf:"bytes,1,opt,name=catalog" json:"catalog,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
}

func (m *Id) Reset()                    { *m = Id{} }
func (m *Id) String() string            { return proto.CompactTextString(m) }
func (*Id) ProtoMessage()               {}
func (*Id) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Id) GetCatalog() string {
	if m != nil {
		return m.Catalog
	}
	return ""
}

func (m *Id) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Id) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Database is a container for tables.
// Database object has two sets of parameters:
//  - User parameters are intended for user and are just transparently passed around
//  - System parameters are intended to be used by Hive for its internal purposes
//
// Original Metastore Database object also had owner information.
// These can be represented using system parameters if needed since the current
// metastore service does not interpret Owner info.
type Database struct {
	Id               *Id               `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Location         string            `protobuf:"bytes,2,opt,name=location" json:"location,omitempty"`
	Parameters       map[string]string `protobuf:"bytes,3,rep,name=parameters" json:"parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SystemParameters map[string]string `protobuf:"bytes,4,rep,name=system_parameters,json=systemParameters" json:"system_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Database) Reset()                    { *m = Database{} }
func (m *Database) String() string            { return proto.CompactTextString(m) }
func (*Database) ProtoMessage()               {}
func (*Database) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Database) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Database) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Database) GetParameters() map[string]string {
	if m != nil {
		return m.Parameters
	}
	return nil
}

func (m *Database) GetSystemParameters() map[string]string {
	if m != nil {
		return m.SystemParameters
	}
	return nil
}

// Create a new database.
type CreateDatabaseRequest struct {
	Database *Database `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Cookie   string    `protobuf:"bytes,2,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *CreateDatabaseRequest) Reset()                    { *m = CreateDatabaseRequest{} }
func (m *CreateDatabaseRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateDatabaseRequest) ProtoMessage()               {}
func (*CreateDatabaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *CreateDatabaseRequest) GetDatabase() *Database {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *CreateDatabaseRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

// Request to get database by its ID.
type GetDatabaseRequest struct {
	Id     *Id    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cookie string `protobuf:"bytes,2,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *GetDatabaseRequest) Reset()                    { *m = GetDatabaseRequest{} }
func (m *GetDatabaseRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDatabaseRequest) ProtoMessage()               {}
func (*GetDatabaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetDatabaseRequest) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *GetDatabaseRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

type GetDatabaseResponse struct {
	Database *Database      `protobuf:"bytes,1,opt,name=database" json:"database,omitempty"`
	Status   *RequestStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *GetDatabaseResponse) Reset()                    { *m = GetDatabaseResponse{} }
func (m *GetDatabaseResponse) String() string            { return proto.CompactTextString(m) }
func (*GetDatabaseResponse) ProtoMessage()               {}
func (*GetDatabaseResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetDatabaseResponse) GetDatabase() *Database {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *GetDatabaseResponse) GetStatus() *RequestStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Request to get list of databases
// If exclude_params is set, result may omit parameters
type ListDatabasesRequest struct {
	Catalog       string `protobuf:"bytes,1,opt,name=catalog" json:"catalog,omitempty"`
	Cookie        string `protobuf:"bytes,2,opt,name=cookie" json:"cookie,omitempty"`
	NamePattern   string `protobuf:"bytes,3,opt,name=name_pattern,json=namePattern" json:"name_pattern,omitempty"`
	ExcludeParams bool   `protobuf:"varint,4,opt,name=exclude_params,json=excludeParams" json:"exclude_params,omitempty"`
}

func (m *ListDatabasesRequest) Reset()                    { *m = ListDatabasesRequest{} }
func (m *ListDatabasesRequest) String() string            { return proto.CompactTextString(m) }
func (*ListDatabasesRequest) ProtoMessage()               {}
func (*ListDatabasesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ListDatabasesRequest) GetCatalog() string {
	if m != nil {
		return m.Catalog
	}
	return ""
}

func (m *ListDatabasesRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func (m *ListDatabasesRequest) GetNamePattern() string {
	if m != nil {
		return m.NamePattern
	}
	return ""
}

func (m *ListDatabasesRequest) GetExcludeParams() bool {
	if m != nil {
		return m.ExcludeParams
	}
	return false
}

// Request to drop a database.
// Dropping a database also drops all objects contained in the database
type DropDatabaseRequest struct {
	Id     *Id    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Cookie string `protobuf:"bytes,2,opt,name=cookie" json:"cookie,omitempty"`
}

func (m *DropDatabaseRequest) Reset()                    { *m = DropDatabaseRequest{} }
func (m *DropDatabaseRequest) String() string            { return proto.CompactTextString(m) }
func (*DropDatabaseRequest) ProtoMessage()               {}
func (*DropDatabaseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *DropDatabaseRequest) GetId() *Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *DropDatabaseRequest) GetCookie() string {
	if m != nil {
		return m.Cookie
	}
	return ""
}

func init() {
	proto.RegisterType((*RequestStatus)(nil), "metastore.RequestStatus")
	proto.RegisterType((*Id)(nil), "metastore.Id")
	proto.RegisterType((*Database)(nil), "metastore.Database")
	proto.RegisterType((*CreateDatabaseRequest)(nil), "metastore.CreateDatabaseRequest")
	proto.RegisterType((*GetDatabaseRequest)(nil), "metastore.GetDatabaseRequest")
	proto.RegisterType((*GetDatabaseResponse)(nil), "metastore.GetDatabaseResponse")
	proto.RegisterType((*ListDatabasesRequest)(nil), "metastore.ListDatabasesRequest")
	proto.RegisterType((*DropDatabaseRequest)(nil), "metastore.DropDatabaseRequest")
	proto.RegisterEnum("metastore.RequestStatus_Status", RequestStatus_Status_name, RequestStatus_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Metastore service

type MetastoreClient interface {
	// Create a new database
	CreateDabatase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*GetDatabaseResponse, error)
	// Get database information
	GetDatabase(ctx context.Context, in *GetDatabaseRequest, opts ...grpc.CallOption) (*GetDatabaseResponse, error)
	// Get collection of databases
	ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (Metastore_ListDatabasesClient, error)
	// Destroy a database
	DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*RequestStatus, error)
}

type metastoreClient struct {
	cc *grpc.ClientConn
}

func NewMetastoreClient(cc *grpc.ClientConn) MetastoreClient {
	return &metastoreClient{cc}
}

func (c *metastoreClient) CreateDabatase(ctx context.Context, in *CreateDatabaseRequest, opts ...grpc.CallOption) (*GetDatabaseResponse, error) {
	out := new(GetDatabaseResponse)
	err := grpc.Invoke(ctx, "/metastore.Metastore/CreateDabatase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metastoreClient) GetDatabase(ctx context.Context, in *GetDatabaseRequest, opts ...grpc.CallOption) (*GetDatabaseResponse, error) {
	out := new(GetDatabaseResponse)
	err := grpc.Invoke(ctx, "/metastore.Metastore/GetDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metastoreClient) ListDatabases(ctx context.Context, in *ListDatabasesRequest, opts ...grpc.CallOption) (Metastore_ListDatabasesClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Metastore_serviceDesc.Streams[0], c.cc, "/metastore.Metastore/ListDatabases", opts...)
	if err != nil {
		return nil, err
	}
	x := &metastoreListDatabasesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metastore_ListDatabasesClient interface {
	Recv() (*Database, error)
	grpc.ClientStream
}

type metastoreListDatabasesClient struct {
	grpc.ClientStream
}

func (x *metastoreListDatabasesClient) Recv() (*Database, error) {
	m := new(Database)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *metastoreClient) DropDatabase(ctx context.Context, in *DropDatabaseRequest, opts ...grpc.CallOption) (*RequestStatus, error) {
	out := new(RequestStatus)
	err := grpc.Invoke(ctx, "/metastore.Metastore/DropDatabase", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Metastore service

type MetastoreServer interface {
	// Create a new database
	CreateDabatase(context.Context, *CreateDatabaseRequest) (*GetDatabaseResponse, error)
	// Get database information
	GetDatabase(context.Context, *GetDatabaseRequest) (*GetDatabaseResponse, error)
	// Get collection of databases
	ListDatabases(*ListDatabasesRequest, Metastore_ListDatabasesServer) error
	// Destroy a database
	DropDatabase(context.Context, *DropDatabaseRequest) (*RequestStatus, error)
}

func RegisterMetastoreServer(s *grpc.Server, srv MetastoreServer) {
	s.RegisterService(&_Metastore_serviceDesc, srv)
}

func _Metastore_CreateDabatase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetastoreServer).CreateDabatase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metastore.Metastore/CreateDabatase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetastoreServer).CreateDabatase(ctx, req.(*CreateDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metastore_GetDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetastoreServer).GetDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metastore.Metastore/GetDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetastoreServer).GetDatabase(ctx, req.(*GetDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metastore_ListDatabases_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListDatabasesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetastoreServer).ListDatabases(m, &metastoreListDatabasesServer{stream})
}

type Metastore_ListDatabasesServer interface {
	Send(*Database) error
	grpc.ServerStream
}

type metastoreListDatabasesServer struct {
	grpc.ServerStream
}

func (x *metastoreListDatabasesServer) Send(m *Database) error {
	return x.ServerStream.SendMsg(m)
}

func _Metastore_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DropDatabaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetastoreServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/metastore.Metastore/DropDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetastoreServer).DropDatabase(ctx, req.(*DropDatabaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Metastore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "metastore.Metastore",
	HandlerType: (*MetastoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDabatase",
			Handler:    _Metastore_CreateDabatase_Handler,
		},
		{
			MethodName: "GetDatabase",
			Handler:    _Metastore_GetDatabase_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _Metastore_DropDatabase_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListDatabases",
			Handler:       _Metastore_ListDatabases_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metastore.proto",
}

func init() { proto.RegisterFile("metastore.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x5d, 0x4f, 0xd3, 0x50,
	0x18, 0xb6, 0x1d, 0xcc, 0xed, 0x1d, 0x1b, 0xe3, 0x1d, 0x98, 0xd9, 0x88, 0xce, 0xfa, 0x91, 0x99,
	0x98, 0x95, 0xcc, 0x0b, 0x8c, 0x89, 0x37, 0x0c, 0x50, 0x02, 0x32, 0x52, 0xd0, 0x5b, 0x3c, 0x5b,
	0x4f, 0x48, 0x43, 0xd7, 0x33, 0x7b, 0xce, 0x08, 0x48, 0xb8, 0xf1, 0xce, 0x5b, 0xfd, 0x21, 0xfe,
	0x18, 0xff, 0x82, 0xf1, 0x77, 0x98, 0x9e, 0x9e, 0x96, 0x6e, 0x69, 0xa3, 0x24, 0x5e, 0xed, 0xbc,
	0xef, 0x9e, 0x3e, 0xef, 0xc7, 0xf3, 0x9c, 0x16, 0x16, 0x47, 0x54, 0x10, 0x2e, 0x58, 0x40, 0x3b,
	0xe3, 0x80, 0x09, 0x86, 0xe5, 0x24, 0x61, 0xdc, 0x3b, 0x61, 0xec, 0xc4, 0xa3, 0x16, 0x19, 0xbb,
	0x16, 0xf1, 0x7d, 0x26, 0x88, 0x70, 0x99, 0xcf, 0x23, 0xa0, 0xf9, 0x43, 0x83, 0xaa, 0x4d, 0x3f,
	0x4d, 0x28, 0x17, 0x87, 0x82, 0x88, 0x09, 0xc7, 0x75, 0x28, 0x72, 0x79, 0x6a, 0x6a, 0x2d, 0xad,
	0x5d, 0xeb, 0x3e, 0xe8, 0x5c, 0x93, 0x4f, 0x21, 0x3b, 0xd1, 0x8f, 0xad, 0xe0, 0xb8, 0x0c, 0xf3,
	0x34, 0x08, 0x58, 0xd0, 0xd4, 0x5b, 0x5a, 0xbb, 0x6c, 0x47, 0x01, 0xde, 0x81, 0xe2, 0x90, 0xb1,
	0x53, 0x97, 0x36, 0x0b, 0x32, 0xad, 0x22, 0x73, 0x1d, 0x8a, 0xaa, 0x60, 0x11, 0xf4, 0xfe, 0x6e,
	0xfd, 0x16, 0x96, 0x61, 0x7e, 0xcb, 0xb6, 0xfb, 0x76, 0x5d, 0xc3, 0x05, 0x28, 0xed, 0xf7, 0x8f,
	0xb6, 0xfb, 0xef, 0xf7, 0x37, 0xeb, 0x7a, 0x18, 0xf5, 0xfa, 0xfb, 0xdb, 0x7b, 0x3b, 0xbd, 0xa3,
	0x7a, 0xc1, 0xdc, 0x00, 0x7d, 0xc7, 0xc1, 0x26, 0xdc, 0x1e, 0x12, 0x41, 0x3c, 0x76, 0x22, 0xdb,
	0x2c, 0xdb, 0x71, 0x88, 0x08, 0x73, 0x3e, 0x19, 0x51, 0xd5, 0x85, 0x3c, 0x63, 0x0d, 0x74, 0xd7,
	0x51, 0x0d, 0xe8, 0xae, 0x63, 0xfe, 0xd6, 0xa1, 0xb4, 0x49, 0x04, 0x19, 0x10, 0x4e, 0x71, 0x55,
	0xfe, 0x19, 0xb2, 0x54, 0xba, 0xd5, 0xd4, 0xb0, 0x3b, 0x4e, 0x88, 0x45, 0x03, 0x4a, 0x1e, 0x1b,
	0xca, 0xa5, 0x29, 0xce, 0x24, 0xc6, 0x1e, 0xc0, 0x98, 0x04, 0x64, 0x44, 0x05, 0x0d, 0x78, 0xb3,
	0xd0, 0x2a, 0xb4, 0x2b, 0xdd, 0x47, 0x29, 0x8a, 0xb8, 0x46, 0xe7, 0x20, 0x41, 0x6d, 0xf9, 0x22,
	0xb8, 0xb0, 0x53, 0x8f, 0xe1, 0x07, 0x58, 0xe2, 0x17, 0x5c, 0xd0, 0xd1, 0x71, 0x8a, 0x6b, 0x4e,
	0x72, 0x3d, 0xcb, 0xe2, 0x3a, 0x94, 0xe0, 0x59, 0xc6, 0x3a, 0x9f, 0x49, 0x1b, 0xaf, 0x61, 0x71,
	0x06, 0x84, 0x75, 0x28, 0x9c, 0xd2, 0x0b, 0xb5, 0xb1, 0xf0, 0x18, 0x8a, 0x76, 0x46, 0xbc, 0x49,
	0xbc, 0xae, 0x28, 0x78, 0xa5, 0xbf, 0xd4, 0x8c, 0x1e, 0xac, 0x64, 0x56, 0xba, 0x09, 0x89, 0xf9,
	0x11, 0x56, 0x7a, 0x01, 0x25, 0x82, 0xc6, 0xdd, 0x2b, 0x07, 0xa1, 0x05, 0x25, 0x47, 0xa5, 0xd4,
	0xea, 0x1b, 0x19, 0xb3, 0xda, 0x09, 0x28, 0xe5, 0x23, 0x7d, 0xca, 0x47, 0xbb, 0x80, 0x6f, 0xa8,
	0x98, 0xa5, 0xff, 0x8b, 0xa6, 0x79, 0x64, 0xe7, 0xd0, 0x98, 0x22, 0xe3, 0x63, 0xe6, 0x73, 0x7a,
	0xf3, 0x66, 0xd7, 0x92, 0x3b, 0xa4, 0x4b, 0x78, 0x33, 0xef, 0x0e, 0xc5, 0x97, 0xc7, 0xfc, 0xa6,
	0xc1, 0xf2, 0x9e, 0xcb, 0x93, 0xda, 0x3c, 0x9e, 0x24, 0xdf, 0xe8, 0x39, 0x43, 0xe0, 0x43, 0x58,
	0x08, 0x4d, 0x7f, 0x3c, 0x26, 0x42, 0xd0, 0xc0, 0x57, 0xb6, 0xaf, 0x84, 0xb9, 0x83, 0x28, 0x85,
	0x4f, 0xa0, 0x46, 0xcf, 0x87, 0xde, 0xc4, 0xa1, 0x91, 0xe7, 0x42, 0xbf, 0x69, 0xed, 0x92, 0x5d,
	0x55, 0x59, 0x29, 0x39, 0x37, 0xf7, 0xa0, 0xb1, 0x19, 0xb0, 0xf1, 0xff, 0x59, 0x6e, 0xf7, 0x6b,
	0x01, 0xca, 0xef, 0x62, 0x30, 0xda, 0x50, 0x8b, 0x9d, 0x31, 0x20, 0x22, 0x5c, 0x5a, 0x2b, 0x45,
	0x95, 0x69, 0x1a, 0xe3, 0x7e, 0x0a, 0x91, 0xa5, 0xd3, 0x67, 0xa8, 0xa4, 0xd2, 0xb8, 0x9a, 0x07,
	0xff, 0x27, 0x36, 0xf3, 0xf9, 0x97, 0x9f, 0xbf, 0xbe, 0xeb, 0x4f, 0xf1, 0xb1, 0x75, 0xd6, 0xb5,
	0x62, 0x69, 0xb9, 0x75, 0xe9, 0x3a, 0x1d, 0x25, 0xc1, 0x95, 0x0c, 0xc2, 0xc5, 0x5e, 0xe1, 0x00,
	0xaa, 0x53, 0xfa, 0x61, 0xfa, 0xbd, 0x99, 0xa5, 0xac, 0x91, 0xe5, 0x21, 0xf3, 0xae, 0x2c, 0xda,
	0xc0, 0x25, 0xcb, 0x19, 0x78, 0x2e, 0x17, 0xd6, 0x65, 0x5c, 0x6b, 0x4d, 0xc3, 0xb7, 0xb0, 0x90,
	0xd6, 0x03, 0xd3, 0x13, 0x64, 0x08, 0x65, 0xe4, 0xda, 0x6e, 0xc3, 0x84, 0xc6, 0x90, 0x8d, 0x3a,
	0xe4, 0x94, 0x79, 0x83, 0x6b, 0xd0, 0x86, 0xd4, 0xe7, 0x30, 0x3c, 0x1e, 0x68, 0x83, 0xa2, 0xfc,
	0x42, 0xbc, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0xfa, 0x9d, 0x38, 0x3e, 0x5d, 0x06, 0x00, 0x00,
}
